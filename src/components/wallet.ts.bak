// import {
//   assertIsBroadcastTxSuccess,
//   SigningStargateClient
// } from "@cosmjs/stargate";

import * as iris from "@irisnet/irishub-sdk";

const chainId = "nyancat-9";
window.onload = async () => {
  if (!window.getOfflineSigner || !window.keplr) {
    alert("Please install keplr extension");
  } else {
    if (window.keplr.experimentalSuggestChain) {
      try {
        await window.keplr.experimentalSuggestChain({
          chainId: chainId,
          chainName: "nyancat",
          rpc: "https://rpc.nyancat.rainbow.one/",
          rest: "https://lcd.nyancat.irisnet.org/",
          stakeCurrency: {
            coinDenom: "NYAN",
            coinMinimalDenom: "unyan",
            coinDecimals: 6
          },
          bip44: {
            coinType: 118
          },
          bech32Config: {
            bech32PrefixAccAddr: "iaa",
            bech32PrefixAccPub: "iaapub",
            bech32PrefixValAddr: "iaavaloper",
            bech32PrefixValPub: "iaavaloperpub",
            bech32PrefixConsAddr: "iaavalcons",
            bech32PrefixConsPub: "iaavalconspub"
          },
          currencies: [
            {
              coinDenom: "NYAN",
              coinMinimalDenom: "unyan",
              coinDecimals: 6
            }
          ],
          feeCurrencies: [
            {
              coinDenom: "NYAN",
              coinMinimalDenom: "unyan",
              coinDecimals: 6
            }
          ]
          //   coinType: 118,
          //   gasPriceStep: {
          //     low: 1,
          //     average: 2,
          //     high: 3
          //   }
        });
      } catch (e) {
        alert("Failed to suggest the chain");
      }
    } else {
      alert("Please use the recent version of keplr extension");
    }
  }

  await window.keplr?.enable(chainId);
};

export const wrapClient = () => {
  let config = {
    node: "https://rpc.nyancat.rainbow.one",
    chainNetwork: iris.types.ChainNetwork.Iris,
    chainId: chainId,
    gas: "200000",
    fee: { denom: "uiris", amount: "100000" }
  };

  const client = iris
    .newClient(config)
    .withKeyDAO({
      write: () => {},
      read: () => {
        return "";
      }
    })
    .withRpcConfig({ timeout: 90000 });
  let recipient = "0xdsdsds";
  let priAmount = "0.2";

  let amount = parseFloat(priAmount);
  if (isNaN(amount)) {
    alert("Invalid amount");
    return false;
  }

  amount *= 1000000;
  amount = Math.floor(amount);

  (async () => {
    // See above.
    const chainId = "nyancat-9";
    await window.keplr?.enable(chainId);
    const offlineSigner =
      window.getOfflineSigner && window.getOfflineSigner(chainId);
    const accounts = await offlineSigner?.getAccounts();

    // irisSdkClient;

    // const client = await SigningStargateClient.connectWithSigner(
    //   "https://rpc-osmosis.blockapsis.com",
    //   offlineSigner
    // );

    // const amountFinal = {
    //   denom: "uosmo",
    //   amount: amount.toString()
    // };
    // const fee = {
    //   amount: [
    //     {
    //       denom: "uosmo",
    //       amount: "5000"
    //     }
    //   ],
    //   gas: "200000"
    // };

    // const result = await client.sendTokens(
    //   accounts[0].address,
    //   recipient,
    //   [amountFinal],
    //   fee,
    //   ""
    // );
    // assertIsBroadcastTxSuccess(result);

    // if (result.code !== undefined && result.code !== 0) {
    //   alert("Failed to send tx: " + result.log || result.rawLog);
    // } else {
    //   alert("Succeed to send tx:" + result.transactionHash);
    // }
  })();

  return false;
};
